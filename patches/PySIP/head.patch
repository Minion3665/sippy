Commit ID: 043c4fd065d7ed8ad78fc23738be70a7bb9f249c
Change ID: pwoywpxqtmrplpppsrykkwxoozqwtltl
Author   : Skyler Grey <sky@a.starrysky.fyi> (2025-07-02 21:31:34)
Committer: Skyler Grey <sky@a.starrysky.fyi> (2025-07-02 23:23:16)

    (no description set)

diff --git a/PySIP/sip_client.py b/PySIP/sip_client.py
index be6d47e5a0..c171019c62 100644
--- a/PySIP/sip_client.py
+++ b/PySIP/sip_client.py
@@ -231,7 +231,7 @@
             realm = received_message.realm
             cseq = self.register_counter.current()
             self.register_tags["cseq"] = cseq
-            uri = f"sip:{self.server}:{self.port};transport={self.CTS}"
+            uri = f"sip:{self.server};transport={self.CTS}"
 
             # Check for qop in WWW-Authenticate header
             qop = received_message.qop
diff --git a/PySIP/sip_core.py b/PySIP/sip_core.py
index 04c998e26f..0c0496427d 100644
--- a/PySIP/sip_core.py
+++ b/PySIP/sip_core.py
@@ -689,6 +689,15 @@
 
         self.set_properties()
 
+    @staticmethod
+    def parse_header_value(header, name, start_char, end_char, default=None):
+        try:
+            return header.split(f'{name}={start_char}')[1].split(end_char)[0]
+        except IndexError:
+            return default
+        except AttributeError:
+            return default
+
     def set_properties(self):
         """type property, should be LITERAL[Message, Response]"""
         self.type_header = self.get_header("type").split(" ")
@@ -717,43 +726,31 @@
         self.call_id = self.get_header("Call-ID")
 
         branch_header = self.get_header("Via")
-        self.branch = branch_header.split("branch=")[1].split(";")[0]
-
-        auth_header_names = ["WWW-Authenticate", "Authorization", "Proxy-Authenticate"]
-        for auth_header_name in auth_header_names:
-            auth_header = self.get_header(auth_header_name)
-            if auth_header:
-                try:
-                    self.nonce = auth_header.split('nonce="')[1].split('"')[0]
-                    self.realm = auth_header.split('realm="')[1].split('"')[0]
-                    self.qop = auth_header.split("qop=")[1].split('"')[1]
-                except IndexError:
-                    pass
+        self.branch = self.parse_header_value(branch_header, "branch", "", ";")
 
         if self.type == SIPMessageType.RESPONSE:
-            try:
-                self.status = SIPStatus(int(self.type_header[1]))
-                via_header = self.get_header("Via")
-                self.public_ip = via_header.split("received=")[1].split(";")[0]
-
-                # RPort
-                self.rport = via_header.split("rport=")[1].split(";")[0]
-                # dialog_id
-                contact_header = self.get_header("Contact")
-                if contact_header:
-                    try:
-                        self.did = contact_header.split("did=")[1].split(">")[0]
-                    except IndexError:
-                        pass
-                # RSeq
-                rseq_header = self.get_header("RSeq")
-                if rseq_header:
-                    self.rseq = rseq_header
-            except IndexError:
-                pass
-
-            except ValueError:
-                pass
+            self.status = SIPStatus(int(self.type_header[1]))
+            via_header = self.get_header("Via")
+
+            self.public_ip = self.parse_header_value(via_header, "received", "", ";")
+
+            # RPort
+            self.rport = self.parse_header_value(via_header, "rport", "", ";")
+
+            for auth_header_name in ["WWW-Authenticate", "Proxy-Authenticate"]:
+                auth_header = self.get_header(auth_header_name)
+                self.nonce = self.parse_header_value(auth_header, 'nonce', '"', '"', self.nonce)
+                self.realm = self.parse_header_value(auth_header, 'realm', '"', '"', self.realm)
+                self.qop = self.parse_header_value(auth_header, 'qop', '"', '"', self.qop)
+                # self.algorithm = self.parse_header_value(auth_header, 'algorithm', '', ',')
+
+            # dialog_id
+            contact_header = self.get_header("Contact")
+            self.did = self.parse_header_value(contact_header, "received", "", ">")
+
+            # RSeq
+            rseq_header = self.get_header("RSeq")
+            self.rseq = rseq_header
 
     def is_from_client(self, uac_username):
         from_header = self.get_header("From")
